{"version":3,"file":"static/js/724.30178f96.chunk.js","mappings":"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","sources":["pages/DomainCase/CustomEditor/EditValue.tsx","pages/DomainCase/utils.ts","pages/DomainCase/CustomEditor/ConfigSpecialVerif.tsx","pages/DomainCase/CustomEditor/index.tsx","pages/DomainCase/mock.ts","pages/DomainCase/index.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { EditOutlined, CheckOutlined, CloseOutlined } from '@ant-design/icons';\nimport { Input, Tooltip } from 'antd';\ninterface IProps {\n    value: string;\n    onEdit: (val: string) => void;\n}\nconst EditValue = (props: IProps) => {\n    const { value: propsValue, onEdit } = props;\n    const [value, setValue] = useState(propsValue);\n    const [inputValue, setInputValue] = useState(value);\n    const [edit, seteEit] = useState<boolean>(false);\n    const measuringRef = useRef<HTMLSpanElement>(null);\n    const [inputWidtn, setInputWidth] = useState<number>(0);\n    const [inputWidthVW, setInputWidthVW] = useState<number>(0);\n    /**设置Input框宽度，及其文本宽度 */\n    const updateWidth = () => {\n        const width = (measuringRef.current as HTMLSpanElement).offsetWidth;\n        const viewportWidth = document.documentElement.clientWidth;\n        const widthVw = (width / viewportWidth) * 100;\n        setInputWidth(width);\n        setInputWidthVW(widthVw);\n    };\n    useEffect(() => {\n        if (measuringRef.current) {\n            updateWidth();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [measuringRef.current]);\n    return (\n        <div style={{ display: 'inline-block' }}>\n            <div style={{ display: 'flex' }}>\n                <div>\n                    {!edit ? (\n                        <span\n                            style={{\n                                display: '-webkit-box',\n                                WebkitBoxOrient: 'vertical',\n                                WebkitLineClamp: 4,\n                                overflow: 'hidden',\n                                textOverflow: 'ellipsis',\n                                maxWidth: '24vw',\n                                lineHeight: '1.5',\n                                maxHeight: '6em',\n                            }}\n                            ref={measuringRef}\n                        >\n                            {inputWidthVW > 20 ? (\n                                <Tooltip placement=\"topLeft\" title={value} overlayStyle={{ maxWidth: '30vw' }}>\n                                    {value}\n                                </Tooltip>\n                            ) : (\n                                value\n                            )}\n                        </span>\n                    ) : (\n                        <Input.TextArea\n                            rows={inputWidtn > 300 ? 4 : 1}\n                            style={{ width: inputWidtn > 300 ? `26vw` : inputWidtn + 40, resize: 'both' }}\n                            value={inputValue}\n                            onChange={(e) => {\n                                setInputValue(e.target.value);\n                            }}\n                        />\n                    )}\n                </div>\n                <div style={{ marginLeft: 12, color: '#5478FC' }}>\n                    {edit && (\n                        <div style={{ display: 'flex' }}>\n                            <div>\n                                <CheckOutlined\n                                    onClick={() => {\n                                        setValue(inputValue);\n                                        onEdit(inputValue);\n                                        seteEit(false);\n                                    }}\n                                />\n                            </div>\n                            <div style={{ marginLeft: 5 }}>\n                                <CloseOutlined\n                                    onClick={() => {\n                                        seteEit(false);\n                                    }}\n                                />\n                            </div>\n                        </div>\n                    )}\n                    {!edit && (\n                        <>\n                            <EditOutlined\n                                onClick={() => {\n                                    updateWidth();\n                                    seteEit(true);\n                                }}\n                            />\n                        </>\n                    )}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default EditValue;","/**根据‘xxx.1.yy’来修改对应数据 */\nexport const modifySubData = (obj: any, path: string, value: string | string[] | boolean) => {\n    if (!obj || !path || value === void 0) return;\n    // if (!obj || !path || !value) return;\n    const modifiedObj = JSON.parse(JSON.stringify(obj));\n\n    const keys = path.split('.');\n    let current = modifiedObj;\n    for (let i = 0; i < keys.length - 1; i++) {\n        const key = isNaN(Number(keys[i])) ? keys[i] : Number(keys[i]);\n        if (!current[key]) {\n            throw new Error(`Property not found: ${keys[i]}`);\n        }\n        current = current[key];\n    }\n    //最后一项单拎出来进行赋值操作\n    // const finalKey = isNaN(Number(keys.at(-1))) ? keys.at(-1) : Number(keys.at(-1)); 插件端浏览器版本过低不支持at语法\n    const finalKey = isNaN(Number(keys[keys.length - 1]))\n        ? keys[keys.length - 1]\n        : Number(keys[keys.length - 1]);\n    current[finalKey!] = value;\n    return modifiedObj;\n};\n\nconst isJSON = (str: any) => {\n    try {\n        JSON.parse(str);\n        return true;\n    } catch (error) {\n        return false;\n    }\n};\n\n/** 解析 [fields] 字段中的 JSON 字符串为对象 */\nexport function convertYamlDatapropertiesToObject(\n    originalObject: any,\n    rootNode: string,\n    fields: string[],\n) {\n    try {\n        const newObj = JSON.parse(JSON.stringify(originalObject)); // 深拷贝对象\n        fields.forEach((fieldName) => {\n            const fieldValue = newObj[rootNode][fieldName];\n            if (typeof fieldValue === 'string') {\n                // 只解析有效的 JSON 字符串，如果是 'null' 字符串则保持原样\n                if (fieldValue === 'null') {\n                    newObj[rootNode][fieldName] = 'null';\n                } else {\n                    // 只解析有效的 JSON 字符串\n                    if (fieldName === 'realYamlData') {\n                        newObj[rootNode][fieldName] = fieldValue;\n                    } else {\n                        newObj[rootNode][fieldName] = isJSON(fieldValue) ? JSON.parse(fieldValue) : fieldValue;\n                    }\n                }\n            }\n        });\n\n        return newObj;\n    } catch (error) {\n        console.error('Failed to process fields:', error);\n        return originalObject[rootNode] || {};\n    }\n}\n\nexport const findAllAssertKeys = (fData: any) => {\n    // 收集所有满足条件的键\n    try {\n        const newData = JSON.parse(JSON.stringify(fData));\n        const keys: any[] = [];\n        const collectKeys = (data: any, prefix = '') => {\n            if (Array.isArray(data)) {\n                data.forEach((el, index) => {\n                    const key = `${prefix}.${index}`;\n                    if (typeof el === 'object' && el !== null) {\n                        collectKeys(el, key);\n                    } else {\n                        keys.push(key);\n                    }\n                });\n            } else if (data !== null && typeof data === 'object') {\n                Object.keys(data).forEach((key) => {\n                    const el = data[key];\n                    const fullKey = prefix ? `${prefix}.${key}` : key;\n                    if (typeof el === 'object' && el !== null) {\n                        collectKeys(el, fullKey);\n                    } else {\n                        keys.push(fullKey);\n                    }\n                });\n            }\n        };\n\n        collectKeys(newData);\n\n        return keys;\n    } catch (error) {\n        console.error(error);\n    }\n};\n\n\nexport const deepConvertEmptyArraysToString = (data: any): any => {\n    if (Array.isArray(data)) {\n        return data.length === 0 ? '[]' : data.map(deepConvertEmptyArraysToString);\n    } else if (data !== null && typeof data === 'object') {\n        return Object.fromEntries(\n            Object.entries(data).map(([key, value]) => [key, deepConvertEmptyArraysToString(value)]),\n        );\n    }\n    return data;\n};\n\n/**JSONPath（$[0].parameter.order）转为链式结构 */\nexport const convertFromJsonPath = (arr: string[], selectKeyRootNode: any, rootNode: any) => {\n    if (!arr) return [];\n    return arr.map((item) => {\n        // 去掉开头的 '$'\n        let modifiedItem = item.replace(/^\\$/, '');\n        // 将 '[数字]' 替换为 '.数字'\n        modifiedItem = modifiedItem.replace(/\\[(\\d+)\\]/g, '.$1');\n        // 如果开头是 '.' 或者 '', 去掉它\n        if (modifiedItem.startsWith('.')) {\n            modifiedItem = modifiedItem.slice(1);\n        }\n        return `${selectKeyRootNode ?? rootNode}.${modifiedItem}`;\n    });\n};\n\n   /**将链式转为JSONPath（$[0].parameter.order）结构 */\n   export const convertToDesiredFormat = (arr: string[]) => {\n    return arr.map((item) => {\n        // 删除第一个点（.）之前的内容\n        const modifiedItem = item.replace(/^[^\\.]+/, '');\n        //将数字以及前边的点（.0）替换为（[0]）\n        const modified = modifiedItem.replace(/\\.(\\d+)/g, '[$1]');\n        // 在字符串开始处添加 '$'\n        // return `$${modified}`;\n        return `$${modified}`;\n    });\n};","import { Button, Card, Col, Divider, Form, Input, InputNumber, Modal, Row, Select, Tooltip } from 'antd'\nimport { DeleteOutlined, PlusOutlined, SettingOutlined } from '@ant-design/icons'\nimport React, { useEffect, useState } from 'react'\n\nconst { TextArea } = Input\n\nconst RULE_TYPE: Record<string, string> = {\n    IS_NOT_EMPTY: '不为空',\n    IS_EMPTY: '为空',\n    EQUALS: '==',\n    NOT_EQUALS: '!=',\n    IN: 'IN',\n    NOT_IN: 'NOT_IN',\n    GREATER_THAN: '>',\n    GREATER_THAN_OR_EQUAL_TO: '>=',\n    LESS_THAN: '<',\n    LESS_THAN_OR_EQUAL_TO: '<='\n}\n\nconst ConfigSpecialVerif = (props: any) => {\n    const { keyPath, value, specialAssertConfigs = [], onConfirm } = props\n    const [form] = Form.useForm()\n    const [open, setOpen] = useState(false)\n    const [formData, setFormData] = useState<any>()\n    const [timer, setTimer] = useState<any>(null)\n\n    useEffect(() => {\n\n        if (open) {\n            const item = specialAssertConfigs?.find((item: any) => item?.keyPath === keyPath)\n\n            form.setFieldsValue({\n                keyPath,\n                value,\n                expressList: (!item?.expressList || item?.expressList?.length < 1) ? [{}] : item?.expressList\n            })\n            formChange()\n        }\n    }, [open])\n\n    const formChange = () => {\n        const formInfo = form.getFieldsValue()\n        setFormData(formInfo)\n\n        //去除红色校验文本\n        const expressList = formInfo.expressList || [];\n        expressList.forEach((item: any, index: number) => {\n            if (!item?.expectValue) {\n                form.setFields([{ name: ['expressList', index, 'parseFunction'], errors: [] }]);// 清除校验错误信息\n            }\n            if (!item?.parseFunction) {\n                form.setFields([{ name: ['expressList', index, 'expectValue'], errors: [] }]);// 清除校验错误信息\n            }\n        });\n    }\n\n    const onFinish = (vals: any) => {\n        const { expressList, ...vs } = vals\n\n        const params = {\n            ...vs,\n            expressList: expressList?.filter((item: any) => {\n                if (['IS_NOT_EMPTY', 'IS_EMPTY'].includes(item?.operator)) {\n                    return item?.parseFunction\n                }\n                return (item?.parseFunction && item?.expectValue)\n            })\n        }\n        // console.log('params---', params);\n\n        onConfirm(params);\n        setOpen(false);\n    }\n\n    return (\n        <div\n            style={{ display: 'inline-block' }}\n            onClick={(e) => {\n                e.stopPropagation()\n            }}\n        >\n            <Tooltip title='配置特殊校验'>\n                <a style={{ cursor: 'pointer' }} onClick={(e) => setOpen(true)}>\n                    <SettingOutlined />\n                </a >\n            </Tooltip>\n\n            <Modal\n                title='配置特殊校验'\n                width={650}\n                style={{\n                    // filter: 'invert(0.85) hue-rotate(170deg)'\n                }}\n                open={open}\n                onCancel={() => setOpen(false)}\n                onOk={() => {\n                    form.submit()\n                }}\n            >\n                <Form form={form}\n                    onFinish={onFinish}\n                // initialValues={{ expressList: [{}] }}\n                >\n                    <Form.Item label='字段路径' name='keyPath'>\n                        <Input disabled />\n                    </Form.Item>\n\n                    <Form.Item label='数据详情' name='value'>\n                        <TextArea placeholder='输入' disabled />\n                    </Form.Item>\n\n                    <Divider />\n\n                    <Form.List name=\"expressList\">\n                        {(fields, { add, remove }) => (\n                            <>\n                                {fields.map(({ key, name, ...restField }) => (\n                                    <Row key={key} gutter={[8, 6]}>\n                                        <Col span={24}>\n                                            <Form.Item\n                                                {...restField}\n                                                label={'解析函数'}\n                                                name={[name, 'parseFunction']}\n                                                rules={[{\n                                                    required: ['IS_NOT_EMPTY', 'IS_EMPTY'].includes(formData?.expressList?.[name]?.operator) ? true : formData?.expressList?.[name]?.expectValue,\n                                                    message: '请输入'\n                                                }]}\n                                                required={false}\n                                            >\n                                                <TextArea\n                                                    rows={3}\n                                                    placeholder='输入'\n                                                    onChange={() => {\n                                                        if (timer) {\n                                                            clearTimeout(timer);\n                                                        }\n                                                        const newTimer = setTimeout(() => {\n                                                            formChange()\n                                                        }, 300);\n                                                        setTimer(newTimer);\n                                                    }}\n                                                />\n                                            </Form.Item>\n                                        </Col>\n\n                                        <Col span={8}>\n                                            <Form.Item\n                                                {...restField}\n                                                label={'校验规则'}\n                                                name={[name, 'operator']}\n                                                initialValue={'EQUALS'}\n                                            >\n                                                <Select\n                                                    onSelect={() => {\n                                                        formChange()\n                                                    }}\n                                                    showSearch\n                                                    dropdownStyle={{ filter: 'invert(0.85) hue-rotate(170deg)', boxShadow: 'none' }}\n                                                    placeholder=\"请选择\"\n                                                    options={Object.entries(RULE_TYPE).map((item) => ({\n                                                        value: item[0],\n                                                        label: item[1]\n                                                    }))}\n                                                />\n                                            </Form.Item>\n                                        </Col>\n\n                                        <Col span={15}>\n                                            <Form.Item\n                                                {...restField}\n                                                name={[name, 'expectValue']}\n                                                rules={[{\n                                                    required: ['IS_NOT_EMPTY', 'IS_EMPTY'].includes(formData?.expressList?.[name]?.operator) ? false : formData?.expressList?.[name]?.parseFunction,\n                                                    message: '请输入'\n                                                }]}\n                                            >\n                                                {['GREATER_THAN', 'GREATER_THAN_OR_EQUAL_TO', 'LESS_THAN', 'LESS_THAN_OR_EQUAL_TO'].includes(formData?.expressList?.[name]?.operator) ? (\n                                                    <InputNumber\n                                                        style={{ width: '100%' }}\n                                                        placeholder=\"输入（数字）\"\n                                                        disabled={['IS_NOT_EMPTY', 'IS_EMPTY'].includes(formData?.expressList?.[name]?.operator)}\n                                                        onChange={() => {\n                                                            if (timer) {\n                                                                clearTimeout(timer);\n                                                            }\n                                                            const newTimer = setTimeout(() => {\n                                                                formChange()\n                                                            }, 300);\n                                                            setTimer(newTimer);\n                                                        }}\n                                                    />\n                                                ) : (\n                                                    <Input\n                                                        placeholder={['NOT_IN', 'IN'].includes(formData?.expressList?.[name]?.operator) ? '多个值请用英文逗号分隔' : '输入'}\n                                                        disabled={['IS_NOT_EMPTY', 'IS_EMPTY'].includes(formData?.expressList?.[name]?.operator)}\n                                                        onChange={() => {\n                                                            if (timer) {\n                                                                clearTimeout(timer);\n                                                            }\n                                                            const newTimer = setTimeout(() => {\n                                                                formChange()\n                                                            }, 300);\n                                                            setTimer(newTimer);\n                                                        }}\n                                                    />\n                                                )}\n                                            </Form.Item>\n                                        </Col>\n                                        <Col span={1}>\n                                            <DeleteOutlined\n                                                style={{\n                                                    color: 'red',\n                                                    marginTop: 8,\n                                                    fontSize: 16,\n                                                    cursor: 'pointer'\n                                                }}\n                                                onClick={() => {\n                                                    remove(name)\n                                                    formChange()\n                                                }}\n                                            />\n                                        </Col>\n                                        <Divider style={{ marginTop: -10 }} />\n                                    </Row>\n                                ))}\n                                <Form.Item>\n                                    <Button\n                                        style={{ width: '100%' }}\n                                        type=\"dashed\"\n                                        onClick={() => { add() }}\n                                        block\n                                        icon={<PlusOutlined />}\n                                    >\n                                        添加规则\n                                    </Button>\n                                </Form.Item>\n                            </>\n                        )}\n                    </Form.List>\n                </Form>\n            </Modal>\n        </div>\n    )\n}\n\nexport default ConfigSpecialVerif","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect, useState } from 'react';\nimport { Tree, Checkbox } from 'antd';\nimport EditValue from './EditValue';\nimport {\n    findAllAssertKeys,\n    modifySubData,\n    convertYamlDatapropertiesToObject,\n    deepConvertEmptyArraysToString,\n    convertFromJsonPath,\n    convertToDesiredFormat,\n} from '../utils';\nimport ConfigSpecialVerif from './ConfigSpecialVerif';\ninterface CustomEditorType {\n    ConvertToAntdTreeDataFunction: (data: any, nodeKey?: string, depth?: number) => any;\n    BuildTreeNode: (el: object, key: any, isBasicType?: boolean) => void;\n}\ninterface IProps {\n    data: any;\n    rootNode: string;\n    assertChecked?: boolean;\n    editValue?: boolean;\n    isAllAssert?: boolean;\n    isAllCheckbox?: boolean;\n    interfaceObj?: string;\n    onChange: (...set: any) => void;\n    showNode?: any;\n    noShowAssert?: boolean;\n    selectKey?: string\n    selectKeyRootNode?: string\n    noShowConfigSpecialVerif?: boolean\n}\n/**\n * @param assertChecked     是否展示Assert框（默认不展示）\n * @param editValue         是否展示编辑框（默认不展示）\n * @param isAllAssert       是否展示全选（默认不展示）\n * @param isAllCheckbox     是否全选（默认不全选）\n * @param noShowAssert      是否展示assert文字（默认展示）\n * @param interfaceObj      根据interfaceOb处理\n * @param showNode          指定节点的value值作为数据源\n * @param selectKey         储存选择节点的key\n * @param selectKeyRootNode 节点key值的前缀值\n * @returns\n */\n\nconst jsonToObjArr = ['yamlData', 'properties', 'sofaContext', 'eventPayload', 'headers', 'realYamlData']\n\nconst CustomEditor = (props: IProps) => {\n    const {\n        data: propsData,\n        rootNode,\n        assertChecked = false,\n        editValue = false,\n        isAllAssert = false,\n        isAllCheckbox = false,\n        onChange,\n        interfaceObj,\n        showNode,\n        noShowAssert,\n        noShowConfigSpecialVerif = false,\n        selectKey,\n        selectKeyRootNode\n    } = props;\n    const [subData, setSubData] = useState(\n        convertYamlDatapropertiesToObject(propsData, rootNode, jsonToObjArr)\n    );\n\n\n    const [renderData, setRenderData] = useState<any>();\n    // const [subData, setSubData] = useState(testData);\n    const [assertKeys, setAssertKeys] = useState<string[]>([]);\n    const [allAssert, setAllAssert] = useState<any>([]);\n\n    useEffect(() => {\n        // console.log('CustomEditorsubData', subData);\n        onChange(subData);\n    }, [subData]);\n\n    const [isFirstRender, setIsFirstRender] = useState(true)\n    useEffect(() => {\n        //初始化\n        if (propsData) {\n            const newPropsData = convertYamlDatapropertiesToObject(propsData, rootNode, jsonToObjArr)\n            if (isFirstRender) {\n                setAssertKeys(convertFromJsonPath((newPropsData[rootNode]?.[selectKey || 'assertKeys']), selectKeyRootNode, rootNode));//回显勾选项\n            }\n            newPropsData.rootNode = newPropsData;\n            const editData = newPropsData?.[rootNode]?.yamlData;\n            const properties = newPropsData?.[rootNode]?.properties;\n            const sofaContext = newPropsData?.[rootNode]?.sofaContext;\n            const eventPayload = newPropsData?.[rootNode]?.eventPayload;\n            const headers = newPropsData?.[rootNode]?.headers;\n            const realYamlData = newPropsData?.[rootNode]?.realYamlData;\n\n            const msgRenderDataObj: any = {\n                yamlData: editData,\n                properties,\n                sofaContext,\n                eventPayload,\n            }\n            const rpcRenderDataObj: any = {\n                yamlData: editData,\n                sofaContext,\n            }\n            const httpRenderDataObj: any = {\n                yamlData: editData,\n                headers,\n            }\n\n            const msgRenderData = { [showNode]: msgRenderDataObj[showNode] }\n            const rpcRenderData = { [showNode]: rpcRenderDataObj[showNode] }\n            const httpRenderData = { [showNode]: httpRenderDataObj[showNode] }\n\n            const setNewRenderData = () => {\n                const defaultShowData = { [rootNode]: editData || {} }\n                let result = defaultShowData     //兼容最初版本（最初版本无interfaceObj属性）\n                if (showNode === 'realYamlData') {\n                    result = { [rootNode]: realYamlData || {} }\n                }\n\n                if (interfaceObj === 'MSG') {\n                    result = msgRenderData\n                }\n\n                if (interfaceObj === 'RPC') {\n                    result = showNode ? rpcRenderData : defaultShowData\n                }\n\n                if (interfaceObj === 'HTTP') {\n                    result = showNode ? httpRenderData : defaultShowData\n                }\n                return result\n            }\n            setRenderData(deepConvertEmptyArraysToString(setNewRenderData()));\n            if (isFirstRender) {\n                setAllAssert(findAllAssertKeys(deepConvertEmptyArraysToString(setNewRenderData())));\n            }\n            setIsFirstRender(false)\n        }\n    }, [propsData]);\n\n\n    const updataSubData = (newData: any, patch: string, val: string | string[]) => {\n        //原数据更新时候添加yamlData项（和不显示yamlData配合使用）\n        const arr = patch.split('.') || [];\n\n        if (interfaceObj === 'MSG') {\n            if (arr[1] !== 'assertKeys') {//初始化assertKeys赋值不需要插入隐藏key\n                if (showNode === 'realYamlData') {\n                    arr.splice(1, 0, 'realYamlData');\n                } else {\n                    arr.unshift('request')\n                }\n            }\n        }\n\n        if (interfaceObj !== 'MSG') {\n            if (arr[1] !== 'assertKeys') {\n                if (showNode) {\n                    if (showNode === 'realYamlData') {\n                        arr.splice(1, 0, 'realYamlData');\n                    } else {\n                        arr.unshift('request')\n                    }\n                } else {\n                    arr.splice(1, 0, 'yamlData');\n                }\n            }\n        }\n\n        const newPatch = arr?.join('.');\n\n        const newSubData = modifySubData(newData, newPatch, val);\n        setSubData(newSubData);\n    };\n\n    /**编辑节点时候更新数据 */\n    const onEdit = (key: string, val: string) => {\n        updataSubData(subData, key, val);\n    };\n\n    /**勾选项 */\n    const onCheckbox = (isChecked: boolean, selectTreeKey: string) => {\n        let newAssertKeys = [...assertKeys];\n        if (isChecked) {\n            newAssertKeys.push(selectTreeKey);\n        } else {\n            newAssertKeys = newAssertKeys.filter((item) => item !== selectTreeKey);\n        }\n        setAssertKeys(newAssertKeys);\n    };\n\n    /**给数据根节点（rootNode）添加assertKeys项 */\n    const addAssertKeys = (keys: string[]) => {\n        if (keys.length > 0) {\n            updataSubData(subData, `${rootNode}.assertKeys`, convertToDesiredFormat(keys));\n        } else {\n            updataSubData(subData, `${rootNode}.assertKeys`, []);\n        }\n    };\n\n    /**全选Assert */\n    const selectAll = (check: boolean) => {\n        if (check) {\n            const keys = findAllAssertKeys(renderData);\n            setAssertKeys(keys as string[]);\n        } else {\n            setAssertKeys([]);\n        }\n    };\n\n    const [isFirstAll, setIsFirstAll] = useState(true)\n    useEffect(() => {\n        //Assert全选条件\n        const conditions = [\n            isFirstAll,//首次执行，避免数据更新重复渲染\n            isAllCheckbox,\n            renderData,\n            assertKeys?.length === 0,\n         \n        ];\n        if (conditions.every(condition => condition)) {\n            selectAll(true);\n            setIsFirstAll(false)\n        }\n\n    }, [rootNode, renderData]);\n\n    useEffect(() => {\n        // console.log('assertKeys', assertKeys);\n        if (assertChecked) {\n            addAssertKeys(assertKeys);\n        }\n\n    }, [assertKeys]);\n\n\n    /**配置特殊校验\n     * 不与原逻辑耦合（只需修改此块）\n     * （代码健壮性预留拓展）\n     * Map 的特性：\n     * Map 是一种键值对数据结构，它的键是唯一的。\n     * 如果多次使用相同的键（item.keyPath）调用 Map.set()，后一次的值会覆盖前一次的值。\n     */\n    const onConfigSpecialVerif = (vals: any) => {\n        const specialAssertConfigs = subData?.[rootNode]?.specialAssertConfigs ?? []\n\n        //根据keyPath去重，保留最新项 \n        const resultMap = new Map();\n        [...specialAssertConfigs, vals].forEach((item) => {\n            resultMap.set(item.keyPath, item);\n        });\n        const uniqueArray = Array.from(resultMap.values());\n\n        const newSubData = modifySubData(subData, `${rootNode}.specialAssertConfigs`, uniqueArray);\n        setSubData(newSubData);\n    }\n\n    /**数据转为tree组件数据格式 */\n    const convertToAntdTreeData: CustomEditorType['ConvertToAntdTreeDataFunction'] = (\n        data,\n        nodeKey = 'root',\n        depth = 0,\n    ) => {\n        // 构建树节点\n        const buildTreeNode: CustomEditorType['BuildTreeNode'] = (el, key, isBasicType = false) => {\n            // 更新节点key为链式结构\n            const itemKey = depth === 0 ? `${key}` : `${nodeKey}.${key}`;\n            /**\n             * 子节点为基本数据类型并且是yamlData的子节点才支持勾选编辑\n             */\n            const title = isBasicType ? (\n                // isBasicType && itemKey.includes('yamlData') ? (\n                <div style={{ display: 'flex' }}>\n                    <span>{key}：</span>\n                    <span>\n                        {editValue ? (\n                            <EditValue value={String(el)} onEdit={(val) => onEdit(itemKey, val)} />\n                        ) : (\n                            String(el)\n                        )}\n                    </span>\n\n                    {/* 配置特殊校验 */}\n                    <span style={{ display: assertChecked ? '' : 'none', margin: '0 2px' }}>\n                        <span style={{ display: noShowConfigSpecialVerif ? 'none' : '' }}>\n                            <ConfigSpecialVerif\n                                keyPath={convertToDesiredFormat([itemKey])?.[0]}\n                                value={String(el)}\n                                specialAssertConfigs={subData?.[rootNode]?.specialAssertConfigs ?? []}\n                                onConfirm={(vals: any) => {\n                                    onConfigSpecialVerif(vals)\n                                }}\n                            />\n                        </span>\n                    </span>\n\n                    <span style={{ marginLeft: 5, display: assertChecked ? '' : 'none' }}>\n                        <Checkbox\n                            checked={assertKeys?.includes(itemKey)}\n                            onChange={(e) => {\n                                onCheckbox(e.target.checked, itemKey)\n                            }}\n                        >\n                            <span style={{ color: 'red' }}>{noShowAssert ? '' : 'Assert'}</span>\n                        </Checkbox>\n\n                    </span>\n                </div>\n            ) : (\n                <div>\n                    <span>{key}</span>\n                    <span\n                        //  style={{ marginLeft: 15, display: isAllAssert ? '' : 'none' }}\n                        style={{\n                            marginLeft: 15,\n                            display: ['request', 'response', 'eventPayload', 'sofaContext', 'headers'].includes(itemKey) && isAllAssert ? '' : 'none',\n                        }}\n                    >\n                        <Checkbox\n                            // defaultChecked={itemKey === 'response' ? true : false}\n                            // defaultChecked={true }\n                            style={{ visibility: isAllAssert ? 'visibility' : 'hidden' as any }}\n                            checked={allAssert?.length === assertKeys?.length}\n                            indeterminate={0 < assertKeys?.length && assertKeys?.length < allAssert?.length}\n                            onChange={(e) => selectAll(e.target.checked)}\n                        >\n                            <span>全选</span>\n                        </Checkbox>\n                    </span>\n                </div>\n            );\n            return {\n                key: itemKey,\n                title: title,\n                children: isBasicType ? null : convertToAntdTreeData(el, itemKey, depth + 1), // 基本数据类型没有子节点\n            };\n        };\n\n        if (Array.isArray(data) && data?.length > 0) {\n            // 处理数组类型的数据\n            return data.map((el, index) => {\n                const key = index; // 数组的 key 为它的索引\n                if (typeof el === 'object') {\n                    return buildTreeNode(el, key);\n                } else {\n                    return buildTreeNode(el, key, true); // 基本数据类型直接显示值\n                }\n            });\n        } else if (data !== null && typeof data === 'object') {\n            // 处理对象类型的数据\n            return Object.keys(data).map((key) => {\n                const el = data[key];\n                const isBasicType = !(el !== null && typeof el === 'object');\n                return buildTreeNode(el, key, isBasicType);\n            });\n        } else {\n            // 处理根节点为基本数据类型的情况\n            return [\n                {\n                    key: nodeKey,\n                    title: `${nodeKey}: ${data}`,\n                },\n            ];\n        }\n    };\n\n\n    return (\n        <div style={{ width: '100%', overflowX: 'auto' }}>\n            <Tree\n                treeData={convertToAntdTreeData(renderData)}\n                // virtual\n                onSelect={(a, b) => {\n                    // console.log('a', a);\n                    // console.log('b', b);\n                }}\n            />\n        </div>\n    );\n};\n\nexport default CustomEditor;","export const mockData = {\n    request: {\n        eventPayload: {\n            yamlData: {\n                customerId: '2190170000031691',\n                payToAmount: {\n                    cent: 98998,\n                    currencyValue: '985',\n                    currency: 'PLN',\n                },\n                extendInfo: {},\n                unifiedBusinessLabel: 'KA',\n                consultServiceScenario: {\n                    skipRiskSecurity: false,\n                    bizType: 'TRADE',\n                    productCode: 'MC400401000000000028',\n                    internalUser: true,\n                    terminalType: 'SYSTEM',\n                },\n                payFrom: {\n                    paymentIntentCurrency: 'PLN',\n                },\n                paymentFactor: {\n                    skipPayFailedSendMsgProcess: false,\n                    fundFlowMetadata: {},\n                },\n                paymentMethodTypes: ['P24', 'P25'],\n                partnerId: '2190170000031691',\n            },\n\n\n      \n        },\n\n    },\n\n};\n","import React, { useState } from 'react';\nimport { Checkbox } from 'antd';\nimport CustomEditor from './CustomEditor';\nimport { mockData } from './mock'\nconst DomainCase = () => {\n    const [selectedOptions, setSelectedOptions] = useState<string[]>([\n        'assertChecked', 'editValue', 'isAllAssert', 'isAllCheckbox',\n    ]);\n\n    // 控制复选框变化\n    const handleCheckboxChange = (checkedValues: any[]) => {\n        setSelectedOptions(checkedValues);\n    };\n    return (\n        <div>\n            {/* <Checkbox.Group\n                options={[\n                    { label: 'assertChecked', value: 'assertChecked' },\n                    { label: 'editValue', value: 'editValue' },\n                    { label: 'isAllAssert', value: 'isAllAssert' },\n                    { label: 'isAllCheckbox', value: 'isAllCheckbox' },\n                ]}\n                value={selectedOptions}\n                onChange={handleCheckboxChange}\n            /> */}\n            <CustomEditor\n                data={mockData?.request}\n                rootNode='eventPayload'\n                assertChecked={true}\n                editValue={true}\n                isAllAssert={true}\n                isAllCheckbox={true}\n                onChange={(vals) => {\n                    console.log(\"🚀 ~ DomainCase ~ vals:\", vals)\n\n                }}\n            />\n        </div>\n    )\n}\n\nexport default DomainCase"],"names":["props","value","propsValue","onEdit","setValue","useState","inputValue","setInputValue","edit","seteEit","measuringRef","useRef","inputWidtn","setInputWidth","inputWidthVW","setInputWidthVW","updateWidth","width","current","offsetWidth","widthVw","document","documentElement","clientWidth","useEffect","_jsx","style","display","children","_jsxs","Input","TextArea","rows","resize","onChange","e","target","WebkitBoxOrient","WebkitLineClamp","overflow","textOverflow","maxWidth","lineHeight","maxHeight","ref","Tooltip","placement","title","overlayStyle","marginLeft","color","CheckOutlined","onClick","CloseOutlined","_Fragment","EditOutlined","modifySubData","obj","path","modifiedObj","JSON","parse","stringify","keys","split","i","length","key","isNaN","Number","Error","convertYamlDatapropertiesToObject","originalObject","rootNode","fields","newObj","forEach","fieldName","fieldValue","str","error","isJSON","console","findAllAssertKeys","fData","newData","collectKeys","data","prefix","arguments","undefined","Array","isArray","el","index","push","Object","fullKey","deepConvertEmptyArraysToString","map","fromEntries","entries","_ref","convertToDesiredFormat","arr","item","replace","RULE_TYPE","IS_NOT_EMPTY","IS_EMPTY","EQUALS","NOT_EQUALS","IN","NOT_IN","GREATER_THAN","GREATER_THAN_OR_EQUAL_TO","LESS_THAN","LESS_THAN_OR_EQUAL_TO","keyPath","specialAssertConfigs","onConfirm","form","Form","useForm","open","setOpen","formData","setFormData","timer","setTimer","_item$expressList","find","setFieldsValue","expressList","formChange","formInfo","getFieldsValue","expectValue","setFields","name","errors","parseFunction","stopPropagation","cursor","SettingOutlined","Modal","onCancel","onOk","submit","onFinish","vals","vs","params","filter","includes","operator","Item","label","disabled","placeholder","Divider","List","add","remove","_ref2","_formData$expressList","_formData$expressList2","_formData$expressList3","_formData$expressList4","_formData$expressList5","_formData$expressList6","_formData$expressList7","_formData$expressList8","_formData$expressList9","_formData$expressList10","_formData$expressList11","_formData$expressList12","_formData$expressList13","_formData$expressList14","_formData$expressList15","_formData$expressList16","restField","Row","gutter","Col","span","rules","required","message","clearTimeout","newTimer","setTimeout","initialValue","Select","onSelect","showSearch","dropdownStyle","boxShadow","options","InputNumber","DeleteOutlined","marginTop","fontSize","Button","type","block","icon","PlusOutlined","jsonToObjArr","propsData","assertChecked","editValue","isAllAssert","isAllCheckbox","interfaceObj","showNode","noShowAssert","noShowConfigSpecialVerif","selectKey","selectKeyRootNode","subData","setSubData","renderData","setRenderData","assertKeys","setAssertKeys","allAssert","setAllAssert","isFirstRender","setIsFirstRender","_newPropsData$rootNod2","_newPropsData$rootNod3","_newPropsData$rootNod4","_newPropsData$rootNod5","_newPropsData$rootNod6","_newPropsData$rootNod7","newPropsData","_newPropsData$rootNod","convertFromJsonPath","modifiedItem","startsWith","slice","editData","yamlData","properties","sofaContext","eventPayload","headers","realYamlData","msgRenderDataObj","rpcRenderDataObj","httpRenderDataObj","msgRenderData","rpcRenderData","httpRenderData","setNewRenderData","defaultShowData","result","updataSubData","patch","val","splice","unshift","newPatch","join","newSubData","selectAll","check","isFirstAll","setIsFirstAll","every","condition","convertToAntdTreeData","nodeKey","depth","buildTreeNode","_convertToDesiredForm","_subData$rootNode$spe2","_subData$rootNode2","isBasicType","itemKey","EditValue","String","margin","ConfigSpecialVerif","_subData$rootNode$spe","_subData$rootNode","resultMap","Map","set","uniqueArray","from","values","onConfigSpecialVerif","Checkbox","checked","onCheckbox","isChecked","selectTreeKey","newAssertKeys","visibility","indeterminate","overflowX","Tree","treeData","a","b","mockData","request","customerId","payToAmount","cent","currencyValue","currency","extendInfo","unifiedBusinessLabel","consultServiceScenario","skipRiskSecurity","bizType","productCode","internalUser","terminalType","payFrom","paymentIntentCurrency","paymentFactor","skipPayFailedSendMsgProcess","fundFlowMetadata","paymentMethodTypes","partnerId","DomainCase","selectedOptions","setSelectedOptions","CustomEditor","log"],"sourceRoot":""}