{"version":3,"file":"static/js/228.826d9d9d.chunk.js","mappings":"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","sources":["pages/components/CopyText.tsx","pages/components/CustomMarkdown/index.tsx","pages/components/TextEllipsis.tsx","pages/ComponentDemo/index.tsx","pages/ComponentDemo/mock.js"],"sourcesContent":["import React from 'react';\nimport { CopyOutlined, LinkOutlined } from '@ant-design/icons';\nimport { message } from 'antd';\n\ninterface CopyTextProps {\n  /** 显示的内容，可以是字符串或 React 节点 */\n  content: React.ReactNode;\n  /** 复制时的文本，默认取 content（若是字符串） */\n  copyText?: string;\n  /** 点击图标后跳转的链接 */\n  link?: string;\n  /** 外部样式 */\n  className?: string;\n  style?: React.CSSProperties;\n  /** 复制成功后的回调 */\n  onCopySuccess?: (copiedText: string) => void;\n}\n\n/**\n * 复制文本到剪贴板\n * @param text 待复制文本\n */\nconst copyToClipboard = async (text: string): Promise<boolean> => {\n  try {\n    if (navigator.clipboard?.writeText) {\n      await navigator.clipboard.writeText(text);\n    } else {\n      // 旧浏览器回退方案\n      const textarea = document.createElement('textarea');\n      textarea.value = text;\n      textarea.style.position = 'fixed'; // 避免滚动影响\n      textarea.style.opacity = '0';\n      document.body.appendChild(textarea);\n      textarea.focus();\n      textarea.select();\n      document.execCommand('copy');\n      document.body.removeChild(textarea);\n    }\n    return true;\n  } catch (err) {\n    console.error('复制失败:', err);\n    return false;\n  }\n};\n\nconst CopyText: React.FC<CopyTextProps> = ({\n  content,\n  copyText,\n  link,\n  className,\n  style,\n  onCopySuccess,\n}) => {\n  const handleCopy = async () => {\n    const text = copyText ?? (typeof content === 'string' ? content : '');\n    if (!text) {\n      message.warning('没有可复制的内容');\n      return;\n    }\n\n    const success = await copyToClipboard(text);\n    if (success) {\n      message.success('复制成功');\n      onCopySuccess?.(text);\n    } else {\n      message.error('复制失败，请手动选择内容');\n    }\n  };\n\n  return (\n    <div\n      className={className}\n      style={{ display: 'flex', alignItems: 'center', ...style }}\n    >\n      <div>{content}</div>\n      <div style={{ marginLeft: 4, display: 'flex', alignItems: 'center' }}>\n        <button\n          type=\"button\"\n          onClick={handleCopy}\n          aria-label=\"复制文本\"\n          style={{\n            background: 'none',\n            border: 'none',\n            cursor: 'pointer',\n            padding: 0,\n            margin: 0,\n            color: \"#1677ff\",\n          }}\n        >\n          <CopyOutlined />\n        </button>\n        {link && (\n          <button\n            type=\"button\"\n            aria-label=\"打开链接\"\n            onClick={() => window.open(link, '_blank')}\n            style={{\n              background: 'none',\n              border: 'none',\n              cursor: 'pointer',\n              padding: 0,\n              marginLeft: 8,\n\n            }}\n          >\n            <LinkOutlined />\n          </button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default CopyText;\n","// import { thinkToBlockquote } from '@/utils';\nimport React, { useCallback, useMemo } from 'react';\nimport Markdown from 'react-markdown';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { materialDark } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport rehypeRaw from 'rehype-raw';\nimport remarkGfm from 'remark-gfm';\nimport './markdown.css';\nexport const thinkToBlockquote = (input: string) => {\n  if (!input.includes('<think>') && !input.includes('</think>')) {\n    return input;\n  }\n  // 如果包含标签，执行替换操作\n  const output = input\n    .replace(/<think>/g, '<blockquote>') // 替换 <think> 为 <blockquote>\n    .replace(/<\\/think>/g, '</blockquote>'); // 替换 </think> 为 </blockquote>\n\n  return output;\n};\nconst CustomMarkdown = ({ content }: any) => {\n  const memoizedContent = useMemo(() => thinkToBlockquote(content), [content]);\n\n  // 使用 useCallback 缓存代码块处理函数\n  const renderCodeBlock = useCallback(\n    ({ inline, className, children, ...props }: any) => {\n      const match = /language-(\\w+)/.exec(className || '');\n      if (!inline && match) {\n        return (\n          <SyntaxHighlighter\n            style={materialDark}\n            language={match[1]}\n            PreTag=\"div\"\n            {...props}\n          >\n            {String(children).replace(/\\n$/, '')}\n          </SyntaxHighlighter>\n        );\n      }\n      // inline 或没有匹配的语言时，渲染普通 <code>\n      return <code className={className} {...props}>{children}</code>;\n    },\n    [],\n  );\n\n\n  return (\n    <div className=\"markdown-body\">\n      <Markdown\n        remarkPlugins={[remarkGfm]}\n        rehypePlugins={[rehypeRaw]}\n        components={{\n          code: renderCodeBlock, // 使用缓存的函数\n        }}\n      >\n        {memoizedContent}\n      </Markdown>\n    </div>\n  );\n};\n\nexport default CustomMarkdown;","import React, { useRef, useState, useEffect } from \"react\";\nimport { Tooltip } from \"antd\";\n\ninterface IProps {\n  text: string;\n  width?: string | number;\n  maxLines?: number; // 控制最大行数\n}\n\nconst TextEllipsis = ({ text, width = \"100%\", maxLines = 1 }: IProps) => {\n  const textRef = useRef<HTMLSpanElement>(null);\n  const [isOverflowing, setIsOverflowing] = useState(false);\n\n  useEffect(() => {\n    const element = textRef.current;\n    if (element) {\n      // 检查实际可用空间是否小于内容的空间\n      setIsOverflowing(element.scrollHeight > element.clientHeight);\n    }\n  }, [text, width]);\n\n  const textStyle: React.CSSProperties = {\n    width: width,\n    overflow: \"hidden\",\n    display: \"-webkit-box\",\n    WebkitBoxOrient: \"vertical\",\n    WebkitLineClamp: maxLines, // 控制最大行数\n    textOverflow: \"ellipsis\",\n    verticalAlign: \"top\",\n    lineHeight: '1.5em', // 行高，确保行数计算正确\n  };\n\n  return (\n    <Tooltip title={isOverflowing ? text : \"\"} >\n      <span ref={textRef} style={textStyle}>\n        {text} \n      </span>\n    </Tooltip>\n  );\n};\n\nexport default TextEllipsis;","import React from 'react'\n\nimport { markdownText } from './mock'\nimport { Card, Collapse } from 'antd'\nimport CopyText from '../components/CopyText'\nimport CustomMarkdown from '../components/CustomMarkdown'\nimport TextEllipsis from '../components/TextEllipsis'\n\nconst ComponentDemo = () => {\n    return (\n        <div style={{ padding: 24 }}>\n\n            <Collapse items={[{\n                key: '1',\n                label: 'CopyText',\n                children: <CopyText\n                    content=\"复制文本\"\n                />,\n            },\n            {\n                key: '2',\n                label: 'TextEllipsis',\n                children: <TextEllipsis width={200} text='这是一段很长的文本这是一段很长的文本这是一段很长的文本这是一段很长的文本这是一段很长的文本' />,\n            },\n            {\n                key: '3',\n                label: 'CustomMarkdown',\n                children: <CustomMarkdown content={markdownText} />\n                ,\n            },]} \n            />\n\n\n\n\n        </div>\n    )\n}\n\nexport default ComponentDemo","export const markdownText = `\n# Markdown 示例文档\n\n## 简介\n这是一个示例 Markdown 文档，展示了 **标题、列表、表格和代码块** 的用法。\n\n---\n\n## 表格示例\n\n| 序号 | 姓名   | 年龄 | 职业       |\n|------|--------|------|------------|\n| 1    | 张三   | 28   | 前端开发   |\n| 2    | 李四   | 32   | 后端开发   |\n| 3    | 王五   | 25   | UI设计师   |\n\n---\n\n## 代码块示例\n\n下面是一个简单的 React 组件示例：\n\n\n\\`\\`\\`tsx\nimport React, { useState } from 'react';\n\ninterface CounterProps {\n  initialValue?: number;\n}\n\nconst Counter: React.FC<CounterProps> = ({ initialValue = 0 }) => {\n  const [count, setCount] = useState(initialValue);\n\n  return (\n    <div>\n      <p>当前计数: {count}</p>\n      <button onClick={() => setCount(count + 1)}>增加</button>\n      <button onClick={() => setCount(count - 1)}>减少</button>\n    </div>\n  );\n};\n\nexport default Counter;\n\\`\\`\\`\n\n`"],"names":["_ref","content","copyText","link","className","style","onCopySuccess","_jsxs","_objectSpread","display","alignItems","children","_jsx","marginLeft","type","onClick","async","text","message","warning","success","_navigator$clipboard","navigator","clipboard","writeText","textarea","document","createElement","value","position","opacity","body","appendChild","focus","select","execCommand","removeChild","err","console","error","copyToClipboard","background","border","cursor","padding","margin","color","CopyOutlined","window","open","LinkOutlined","memoizedContent","useMemo","thinkToBlockquote","input","includes","replace","renderCodeBlock","useCallback","_ref2","inline","props","_objectWithoutProperties","_excluded","match","exec","SyntaxHighlighter","materialDark","language","PreTag","String","Markdown","remarkPlugins","remarkGfm","rehypePlugins","rehypeRaw","components","code","width","maxLines","textRef","useRef","isOverflowing","setIsOverflowing","useState","useEffect","element","current","scrollHeight","clientHeight","textStyle","overflow","WebkitBoxOrient","WebkitLineClamp","textOverflow","verticalAlign","lineHeight","Tooltip","title","ref","ComponentDemo","Collapse","items","key","label","CopyText","TextEllipsis","CustomMarkdown"],"sourceRoot":""}